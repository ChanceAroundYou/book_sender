version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    command: postgres -p ${POSTGRES_PORT}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p ${POSTGRES_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5
    container_name: postgres
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"  # 单日志文件最大100M
        max-file: "3"     # 最多保留3个日志文件

  # Redis缓存
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: redis-server --appendonly yes --port ${REDIS_PORT}
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${REDIS_PORT}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    container_name: redis
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"  # 单日志文件最大100M
        max-file: "3"     # 最多保留3个日志文件

  # FastAPI应用
  book_web:
    image: book_sender:latest
    build:
      context: ..
      dockerfile: docker/Dockerfile
    restart: always
    command: >
      sh -c "echo 'Starting web service...' &&
             uvicorn app.main:app --host 0.0.0.0 --port ${WEB_PORT}"
    volumes:
      - ../app:/app/app
      - ../downloads:${DOWNLOAD_DIR}
    env_file:
      - ../.env
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
    container_name: book_web
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"  # 单日志文件最大100M
        max-file: "3"     # 最多保留3个日志文件

  # Celery Worker
  book_worker:
    image: book_sender:latest
    command: ["/usr/local/bin/worker-start.sh"]
    restart: always
    volumes:
      - ../app:/app/app
      - ../downloads:${DOWNLOAD_DIR}
      - ../tmp:/app/tmp
    env_file:
      - ../.env
    container_name: book_worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      book_web:
        condition: service_started
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"  # 单日志文件最大100M
        max-file: "3"     # 最多保留3个日志文件


volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
